#!/bin/bash

####################################
# Script that identifies the haplotype-specific duplications that caused by heterozygous variations.
# Input your assembly (contigs or scaffolds), primary and alternate sequences will be seperated
# from your assembly.
####################################

# default sequence divergence
divergence=0.1
perc_div=$(printf "%.0f" $(echo $divergence\*100 | bc))
# default number of threads
thread=3
# default mapping quality threshold
MAPQ=30
# default mismatch percentage tolerance
MIS_PCT=0.05
# default output path
outDir=$(pwd)
# get the script path
script_full_path=$(dirname "$0")

################################################################################
printHelp()
{
   # Display Help
   echo "This script identifies haplotype-specific duplications caused by heterozygous variantions."
   echo "The names of duplicated sequences will be indicated in the end. The script can be applied"
   echo "both at the contig and scaffold level"
   echo
   echo "Syntax: sh ./main.sh -f <FA>  [-n|x|t|o]"
   echo "options:"
   echo "-s		Specify when sequence file is scaffolds."
   echo "-f FILE		Sequence file that is required to inspect haplotype-specific duplicates."
   echo "-n INT          Number of chromosome-level scaffolds. Only used when -s is activated."
   echo "-x FLOAT	Upper bound of sequence divergence used in minimap2 alignments."
   echo "		Allowed input: 0.05, 0.1 (by default) and 0.2. Default: 0.1."
   echo "-t INT          Number of threads used in minimap2. Default: 3."
   echo "-o DIR		Output directory. All generated files are put in this directory."
   echo "		Default: present working directory."
   echo "-h		Print this help and exit."
   echo
}

########### HANDLE OPTIONS ##############
while getopts "sf:o:chr:r:n:t:x:a:h" opt;
do
    case $opt in
    s) echo "-s is activated because input sequences are in scaffold level." >&1
       scaffold_level=true ;;
    f) _fasta=$OPTARG ;;
    o) outDir=$OPTARG ;;
    n) _numChr=$OPTARG
       NCHR=true ;;
    x) divergence=$OPTARG
       perc_div=$(printf "%.0f" $(echo $divergence\*100 | bc))
       echo "The sequence divergence when identifying alignments using minimap2 was set as ${perc_div}%. Default: 10." >&1 ;;
    t) thread=$OPTARG ;;
    m) MAPQ=$OPTARG ;;
    p) MIS_PCT=$OPTARG ;;
    a) _ann=$OPTARG ;;
    h) printHelp
       exit ;;
    esac
done


############################## Alignment ##############################

if [ "$scaffold_level" ]
then
    # split the sequence file into chromosome-scale scaffolds and small scaffolds if the input is scaffolds
    if [ $NCHR ]
	then
		splitSfdNum=$((_numChr+1))
		split_line=$(grep -n ">" $_fasta | sed "${splitSfdNum}q;d" | cut -d":" -f1)
		head -n $((split_line-1)) $_fasta > ${outDir}/target.fa
		tail -n+$split_line $_fasta > ${outDir}/query.fa
		# alignment is performed by minimap2
		minimap2 -x asm${perc_div}  -t $thread -c --eqx  \
		 ${outDir}/target.fa ${outDir}/query.fa \
		 > ${outDir}/aln.paf
    else
		echo ":( Necessary arguments are incomplete, please check your inputs." >&2
		printHelp
		exit
    fi
else
	# when the input sequence file is contigs or all non-chr-level scaffolds:
	ln -s $_fasta ${outDir}/query.fa
	ln -s $_fasta ${outDir}/target.fa
	# alignment file is generated by minimap2 mapping
	minimap2 -x asm${perc_div}  -t $thread -D -c --eqx  \
	 ${outDir}/target.fa ${outDir}/query.fa \
	 > ${outDir}/aln.paf
fi

rm ${outDir}/query.fa
rm ${outDir}/target.fa


############################## Identify Duplications ##############################

if [ "$scaffold_level" ]
then
	# extract query seq's name, length, start, end, and mapping quality
	awk '{print $1,$2,$3,$4,$12}' ${outDir}/aln.paf > ${outDir}/aln.txt
	
	# run python script to find the duplicated small scaffolds
	python ${script_full_path}/identify_small_scaffold_dups.py \
		   -a ${outDir}/aln.txt \
		   -m $MAPQ -p $MIS_PCT \
		   -o $outDir
	
	# index sequence file when there is not one
	if [[ ! -f $_fasta.fai ]]
	then
		echo "Index of sequence fasta file is not found in your filesystem, will be created by samtools."
		samtools faidx $_fasta
	fi
	cut -f1 $_fasta.fai > ${outDir}/all_seq_names.txt
	grep -vxf ${outDir}/alternate_seqs.txt ${outDir}/all_seq_names.txt > ${outDir}/primary_seqs.txt
	   
	# output two fasta files:
	# 1. alternate sequences (duplicated small scaffolds)
	# 2. primary sequences (all other sequences excluding 1.)
	samtools faidx $_fasta -r ${outDir}/alternate_seqs.txt -o ${outDir}/alternate_seqs.fa
	samtools faidx $_fasta -r ${outDir}/primary_seqs.txt -o ${outDir}/primary_seqs.fa
	
	rm ${outDir}/all_seq_names.txt
	rm ${outDir}/aln.txt

else
	# when input file is contigs or all scaffolds are non-chr level:
	
	# index sequence file when there is not one
	if [[ ! -f $_fasta.fai ]]
	then
		echo "Index of sequence fasta file is not found in your filesystem, will be created by samtools."
		samtools faidx $_fasta
	fi
	
	# extract query seq's name, length, start, end; target's name, length, start, end; and mapping length, QV
	awk '{print $1,$2,$3,$4,$6,$7,$8,$9,$11,$12}' ${outDir}/aln.paf > ${outDir}/aln.txt
	cut -f1 $_fasta.fai > ${outDir}/all_seq_names.txt
	
	# run python script to find haplotigs (haplotype-specific duplicated contigs)
	python ${script_full_path}/identify_haplotigs.py -a ${outDir}/aln.txt \
													 -l ${outDir}/all_seq_names.txt \
													 -m $MAPQ -p $MIS_PCT -o $outDir
	# output is the name list of primary contigs and alternate contigs respectively, written in $outDir
	# then split the sequence file into primary sequences and alternate sequences
	samtools faidx $_fasta -r ${outDir}/alternate_contig_names.txt -o ${outDir}/alternate_contigs.fa
	samtools faidx $_fasta -r ${outDir}/primary_contig_names.txt -o ${outDir}/primary_contigs.fa
	
	rm ${outDir}/all_seq_names.txt
	rm ${outDir}/aln.txt
fi


##############################  Variants Statistics ##############################

#python ${script_full_path}/variants_statistics.py

############################## Option: Annotation Crosscheck ##############################
# If annotation file is provided, crosschecking with alternate sequences can provide
# potential false positive copy number variants of genes due to the haplotype-specific duplicates


